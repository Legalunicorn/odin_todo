(()=>{"use strict";class t{constructor(t,e,s){this.title=t,this.desc=e,this.date=s,this.isStar=!1,this.id=0}getTitle(){return this.title}setTitle(t){this.title=t}getDesc(){return this.desc}setDesc(t){this.desc=t}getDate(){return this.date}setDate(t){this.date=t}setID(t){this.id=t}getID(){return this.id}toggleStar(){this.isStar?this.isStar=!1:this.isStar=!0}isStarred(){if(this.isStar)return"priority"}}class e{constructor(t){this.projectName=t,this.tasks=[],this.count=0}getName(){return this.projectName}setName(t){this.projectName=t}addCount(){this.count++}resetCount(){this.count=0}addTask(e,s,o){const a=new t(e,s,o);a.setID(this.count),this.addCount(),this.tasks.push(a)}deleteTask(t){this.tasks.find((e=>e.id==t))&&(this.tasks=this.tasks.filter((e=>e.id==t)))}getTasks(){return this.tasks}getTask(t){if(this.tasks.find((e=>e.getID()==t)))return task}setTasks(t){this.tasks=t}}class s{constructor(){this.projects=[]}addProject(t){this.projects.find((e=>e.getName()==t))||this.projects.push(new e(t))}deleteProject(t){console.log("todo-delteproject, name,",t),this.projects.find((e=>e.getName()==t))&&(this.projects=this.projects.filter((e=>e.getName()!=t)))}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.getName()==t))||[]}setProjects(t){this.projects=t}}class o{static getToDo(){const o=Object.assign(new s,JSON.parse(localStorage.getItem("todo")));return o.setProjects(o.getProjects().map((t=>Object.assign(new e,t)))),o.getProjects().forEach((e=>{e.setTasks(e.getTasks().map((e=>Object.assign(new t,e))))})),o}static saveTodo(t){localStorage.setItem("todo",JSON.stringify(t))}static saveActive(t){localStorage.setItem("active",JSON.stringify(t))}static getActive(){return JSON.parse(localStorage.getItem("active"))||null}static resetActive(){localStorage.removeItem("active")}}class a{static loadPage(){a.clearProjects(),a.clearTasks(),a.loadProjects(),a.loadActiveProject(),a.initModalButtons()}static loadProjects(){o.getToDo().getProjects().forEach((t=>{a.createProject(t)})),null!=o.getActive()&&0!=o.getToDo().getProjects().length&&(console.log("THE ACTIVE PROJ IS: ",o.getActive()),a.setActive(o.getActive())),a.initProjectNav(),a.initDeleteProject()}static setActive(t){const e=document.querySelector(`[data-project-name="${t}"]`);console.log("error,",e,t),e.classList.add("active")}static createProject(t){document.querySelector("ul.projects").innerHTML+=`\n        <li data-project-name="${t.getName()}" class="project">\n        <span>${t.getName()}</span>\n        <span data-del-project="${t.getName()}" class="material-symbols-rounded">close</span>\n        </li>\n        `}static loadTasks(t){o.getToDo().getProject(t).getTasks().forEach((t=>{a.createTask(t)})),console.log("CLEAR!")}static createTask(t){const e=document.querySelector("ul.tasks");console.log("ta?",t),console.log("ta2",t.title),console.log("ta3",t.getTitle()),e.innerHTML+=`\n        <li class="task">\n        <div class="mycheckbox"></div>\n        <span class="task_title">${t.getTitle()}</span>\n        <span class="task_dateline">${t.getDate()}</span>\n        <div class="material-symbols-rounded favourite ${t.isStarred()}">star</div>\n        <div  class="material-symbols-rounded">close</div>\n        </li>\n        `}static loadActiveProject(){const t=document.querySelector(".project.active > span");if(null==t)return;const e=t.textContent;null!=e&&a.loadTasks(e)}static clearProjects(){document.querySelector("ul.projects").innerHTML=""}static clearTasks(){document.querySelector("ul.tasks").innerHTML=""}static getActiveProjectName(){const t=document.querySelector(".project.active>span");if(null!=t)return t.textContent}static initModalButtons(){document.getElementById("overlay"),a.initOpenModalButtons(),a.initCloseModalButtons(),a.initSubmitButtons()}static initOpenModalButtons(){document.querySelectorAll("[data-modal-target]").forEach((t=>{t.addEventListener("click",(e=>{if(console.log("YES U CLICKED"),console.log(null==a.getActiveProjectName()),"#add-task-modal"==t.dataset.modalTarget&&null==a.getActiveProjectName())return void alert("You must have at least one Project to add Task");console.log(a.getActiveProjectName());const s=document.querySelector(t.dataset.modalTarget);console.log(s,t),a.openModal(s)}))}))}static initSubmitButtons(){const t=document.querySelector('[data-submit="add-task"]');t.addEventListener("click",(()=>{a.closeModal(t.closest(".modal"));const e=document.getElementById("add-task-title").value,s=document.getElementById("add-task-desc").value,c=document.getElementById("add-task-date").value;if(""==e)return void alert("Task title cannot be empty!");const l=a.getActiveProjectName();let i=o.getToDo();i.getProject(l).addTask(e,s,c),o.saveTodo(i),a.clearTasks(),a.loadTasks(l)}));const e=document.querySelector('[data-submit="add-project"]');e.addEventListener("click",(()=>{const t=document.getElementById("add-project").value;if(""==t)return void alert("Project Name cannot be null");if(o.getToDo().getProject(t)==t)return void alert("Project name alreadt in use!");a.closeModal(e.closest(".modal"));const s=o.getToDo();if(s.addProject(t),o.saveTodo(s),a.clearProjects(),a.loadProjects(),1==s.getProjects().length){const t=document.querySelector("li.project");t.classList.add("active"),o.saveActive(t.dataset.projectName)}}))}static initCloseModalButtons(){document.querySelectorAll("[data-close-modal]").forEach((t=>{t.addEventListener("click",(()=>{const e=t.closest(".modal");a.closeModal(e)}))}))}static openModal(t){null!=t&&(t.classList.add("active"),overlay.classList.add("active"))}static closeModal(t){null!=t&&(t.classList.remove("active"),overlay.classList.remove("active"))}static initProjectNav(){const t=document.querySelectorAll("li.project span:first-child");console.log("this is all the projects",t),t.forEach((t=>{t.addEventListener("click",(()=>{const e=t.parentNode;console.log(e.classList),e.classList.contains("active")||(document.querySelector(".project.active").classList.remove("active"),e.classList.add("active"),console.log("PROJ NAME IS: ",e.dataset.projectName),a.clearTasks(),a.loadTasks(e.dataset.projectName))}))}))}static setFirstToActive(){if(o.getToDo().getProjects().length>=1){const t=o.getToDo().getProjects()[0].getName();o.saveActive(t)}}static initDeleteProject(){document.querySelectorAll("[data-del-project]").forEach((t=>{t.addEventListener("click",(()=>{let e;t.parentNode.classList.contains("active")&&(e=!0);const s=o.getToDo();s.deleteProject(t.dataset.delProject),o.saveTodo(s),(e&&s.getProjects().length>0||1==s.getProjects().length)&&(console.log("bef sfta: ",o.getActive()),a.setFirstToActive(),console.log("aft sfta: ",o.getActive())),0==s.getProjects().length&&o.resetActive(),console.log("DELETED: ",t.dataset.delProject),a.clearProjects(),a.loadProjects(),console.log("loaded."),a.initProjectNav(),a.initDeleteProject()}))}))}}a.loadPage()})();